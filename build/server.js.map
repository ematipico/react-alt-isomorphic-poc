{"version":3,"sources":["server.js"],"names":[],"mappings":"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","file":"server.js","sourcesContent":["// an Isomorphic helper\r\nimport register from 'babel-core/register';\r\nimport Iso from 'iso';\r\n\r\nimport React from 'react';\r\nimport express from 'express';\r\nimport path from 'path';\r\n\r\nimport IsoApp from '../app/app.jsx';\r\nimport Flux from '../app/flux.js';\r\nimport ReactDOMServer from 'react-dom/server';\r\nimport routes from '../app/routes.js';\r\nimport $ from 'jquery';\r\nimport i18n from 'i18n';\r\n\r\nlet app = express();\r\n\r\n// Static directories to make css and js work\r\napp.use('/build', express.static(path.join('build')));\r\napp.use('/assets', express.static(path.join('assets')));\r\napp.use('/data', express.static(path.join('data')));\r\n\r\n// localisation part\r\ni18n.configure({\r\n    locales: ['en', 'fr', 'es'],\r\n    directory: express.static(path.join('locales')),\r\n    defaultLocale: 'en'\r\n});\r\n\r\napp.use(i18n.init);\r\n\r\nvar seoTitle = 'City Wonders home page';\r\nvar seoDescription = 'City Wonders home page';\r\nvar seoKeywords = 'City,Wonders,Home,Page';\r\n\r\n\r\n  let htmlEnd =  `\r\n    <script src=\"/build/main.js\"></script>\r\n      </body>\r\n    </html>\r\n    `;\r\n\r\napp.get('/en', (req, res) => {\r\n    res.redirect('/');\r\n});\r\n\r\nroutes.getRoutes().forEach((item) => {\r\n    app.get(item.path, (req, res) => {\r\n        let language = req.params.language || 'en';\r\n        let flux = new Flux(language, ['en', 'fr', 'es']);\r\n        req.setLocale(language);\r\n        let RouteStore = flux.getStore('RouteStore');\r\n\r\n        RouteStore[item.handler](req, item.page).then((SEO) => {\r\n\r\n            seoTitle = SEO.title;\r\n            seoDescription = SEO.description;\r\n            seoKeywords = SEO.keywords;\r\n\r\n            let htmlStart = `\r\n              <!doctype html>\r\n              <html>\r\n                <head>\r\n                  <meta charset=\"utf-8\">\r\n                  <title>${seoTitle}</title>\r\n                  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n                  <link rel=\"stylesheet\" href=\"/assets/css/bootstrap.css\" media=\"screen\" title=\"no title\" charset=\"utf-8\">\r\n                  <link rel=\"stylesheet\" href=\"/assets/css/app.css\" media=\"screen\" title=\"no title\" charset=\"utf-8\">\r\n                  <script src=\"/assets/js/jquery.min.js\"></script>\r\n                  <script src=\"/assets/js/bootstrap.min.js\"></script>\r\n                  <meta description=\"${seoDescription}\">\r\n                  <meta keywords=\"${seoKeywords}\">\r\n                </head>\r\n                <body>\r\n              `;\r\n\r\n            // This creates the markup that we'll use to pass into Iso\r\n            try {\r\n                // console.dir(ReactDOMServer.renderToString(React.createElement(IsoApp, {flux: flux})))\r\n                var markup = ReactDOMServer.renderToString(\r\n                    <IsoApp flux={flux} locales={['en', 'fr', 'es']} lang={req.getLocale()} />\r\n                );\r\n\r\n                // here we use `alt.flush` in order to flush the data out of the stores\r\n                // for the next request.\r\n                var body = Iso.render(markup, flux.flush(), {\r\n                    locales: ['en', 'fr', 'es'],\r\n                    locale: req.getLocale()\r\n                });\r\n            } catch(e) {\r\n                console.log(e)\r\n            }\r\n            // this is the part where iso kicks in.\r\n            res.send(`${htmlStart}${body}${htmlEnd}`);\r\n\r\n        }).catch(() => {\r\n\r\n        });\r\n\r\n    });\r\n});\r\n\r\napp.use(function(err, req, res, next) {\r\n  console.error(err.stack);\r\n  res.status(500).send('Something broke!');\r\n});\r\n\r\napp.listen(8081, () => {\r\n  console.log('Listening on port 8081');\r\n});\r\n"],"sourceRoot":"/source/"}